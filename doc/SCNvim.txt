*SCNvim.txt*    For nvim version 0.3.1 or later.

        SuperCollider integration for Neovim

SCNvim                                      *SCNvim*

1. Description                              |SCNvim-description|
   1.1 Acknowledgments
2. Installation                             |SCNvim-installation|
   2.1 Requirements
   2.2 Installation
3. Mappings                                 |SCNvim-mappings|
   3.1 Remapping
4. Commands                                 |SCNvim-commands|
5. Help system                              |SCNvim-help-system|
6. Configuration                            |SCNvim-configuration|
7. License                                  |SCNvim-license|

==============================================================================
DESCRIPTION                                                 *SCNvim-description*

SCNvim is a SuperCollider editor frontend for Neovim. It provides ways to
evaluate code and inspect output from the post window among other features
such as automatic function signature hints and more. The goal of this plugin
is to create an integrated development environment for SuperCollider in
Neovim.

Acknowledgments~

This plugin borrows some code and ideas from the original scvim
implementation, for example the code for indent and syntax highlighting.

==============================================================================
INSTALLATION                                               *SCNvim-installation*

Requirements~

Neovim (>= 0.3.1)
SuperCollider (>= 3.9)
pynvim (optional)
pandoc (optional)

Installation~

Here is an example using vim-plug

1. Add this line to your init.vim
   `Plug 'davidgranstrom/scnvim'`
2. `:PlugInstall`

Steps 3-4 require pynvim and can be omitted if you don't want to use the
remote plugin features (see explanation below).

3. `:UpdateRemotePlugins`
4. Exit nvim and re-open

There is also a SuperCollider class that needs to be installed. It is located
at `sc/Classes/SCNvim.sc` of this plugin.

This class needs to be linked to your Extensions directory. (run
`Platform.userExtensionDir` in SuperCollider to see where it is located on
your platform).

In your Extensions directory create a folder named `scide_scvim` and
link/create an alias to `SCNvim.sc` class there.

Example~
>
  ln -s <PATH_TO_SCNVIM_PLUGIN>/sc/Classes/SCNvim.sc \
  ~/Library/Application\ Support/SuperCollider/Extensions/scide_scvim/SCNvim.sc

Finally, open a new file with a `.scd` or `.sc` extension and type
`:SCNvimStart` to start SuperCollider.

==============================================================================
MAPPINGS                                                       *SCNvim-mappings*

<C-e>                   Send current block or line.
                        (depending on context).
                        Mode: Insert, Normal
                        Name: `<Plug>(scnvim-send-block)`

<C-e>                   Send current selection.
                        Mode: Visual
                        Name: `<Plug>(scnvim-send-selection)`

<M-e>                   Send current line.
                        Mode: Insert, Normal
                        Name: `<Plug>(scnvim-send-line)`

<F12>                   Hard stop.
                        Mode: Insert, Normal
                        Name: `<Plug>(scnvim-hard-stop)`

<CR>                    Toggle post window buffer
                        Mode: Insert, Normal
                        Name: `<Plug>(scnvim-postwindow-toggle)`

<M-L>                   Clear post window buffer
                        Mode:  Insert, Normal
                        Name: `<Plug>(scnvim-postwindow-clear)`

K                       Open documentation
                        See `keywordprg`
                        Mode: Normal

Remapping~

You can remap all of the default keybindings using the `<Plug>` mappings.
>
  nmap <F5> <Plug>(scnvim-send-block)
  nmap <C-s> <Plug>(scnvim-send-line)
  imap <C-s> <c-o><Plug>(scnvim-send-line)

==============================================================================
COMMANDS                                                       *SCNvim-commands*

Command                        Description
-------                        -----------
`SCNvimStart`                    Start SuperCollider
`SCNvimStop`                     Stop SuperCollider
`SCNvimRecompile`                Recompile SCClassLibrary
`SCNvimTags`                     Create auto-generated utility files
`SCNvimHelp` <subject>           Open HelpBrowser or window split for <subject>
`SCNvimStatusLine`               Display server status in 'statusline'

==============================================================================
HELP SYSTEM                                                 *SCNvim-help-system*

SCNvim can be configured to render SCDoc help files (.schelp) to plain text
and display the result in split window, much like Nvim's default help system.

The scnvim help system uses `Pandoc` to convert the HTML help file into plain
text with some additional vim-help markup. Pandoc is therefor a dependency if
you'd like to use this feature, it is available for download in all major
package managers see the pandoc homepage[1] for more information.

Set scnvim_scdoc_vim like this in your `init.vim` to enable the native help system.
>
  let g:scnvim_scdoc_vim = 1
<
Useful hints ~

Use the `K` command to open a split window for the documentation of the word
under the cursor. The 'quickfix' window is used to display methods, press enter
on a match to jump to the corresponding help file. Read `:h quickfix` to learn
more about how the 'quickfix' window works.

To see an overview (outline) of the content of the help file press `gO`. This
will open a window local quickfix window (a 'location-list'), use this list to
jump to different sections of the document.

[1]: https://pandoc.org/

==============================================================================
CONFIGURATION                                             *SCNvim-configuration*

The following variables are used to configure scnvim. This plugin should work
out-of-the-box so it is not necessary to set them if you are happy with the
defaults.

Run `:checkhealth` to diagnose common problems with your config.

Post window~

Vertical "v" or horizontal "h" split.
>
  let g:scnvim_postwin_orientation = 'v'

Position of the post window "right" or "left".
>
  let g:scnvim_postwin_direction = 'right'

Set the size of the post window.
Default is half the terminal size for vertical and a third for horizontal.
>
  let g:scnvim_postwin_size = 25

Automatically open post window on a SuperCollider error
>
  let g:scnvim_postwin_auto_toggle = 1

Eval flash~

Duration of the highlight in milliseconds. A value of 0 disables eval flash.
>
  let g:scnvim_eval_flash_duration = 100

Number of flashes. A value of 0 disables eval flash.
>
  let g:scnvim_eval_flash_repeats = 2

Configure the color
>
  highlight SCNvimEval guifg=black guibg=white ctermfg=black ctermbg=white

Extras~

Path to the sclang executable.
SCNvim will look in some known locations for sclang, but if it can't find it
use this variable instead (setting this also improves startup time slightly).
>
  let g:scnvim_sclang_executable = ''

Update rate for server info in status line (seconds)
(don't set this to low or vim will get slow)
>
  let g:scnvim_statusline_interval = 1

Set this variable if you don't want the "echo args" feature
>
  let g:scnvim_echo_args = 0

UDP port for (remote) python plugin, used for statusline server info and more.
>
  let g:scnvim_udp_port = 9670

Set this variable if you don't want any default mappings
>
  let g:scnvim_no_mappings = 1

==============================================================================
LICENSE                                                         *SCNvim-license*

scnvim - SuperCollider integration for Neovim
Copyright © 2018-2019 David Granström

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.


 vim:tw=78:et:ft=help:norl:
